{"version":3,"sources":["components/Header/Header.js","components/Users/Users.js","components/Cart/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","backgroundColor","color","textAlign","padding","Users","props","name","user","first","last","email","phone","salary","dob","age","img","picture","large","handleAdd","className","src","alt","class","onClick","icon","faUser","Cart","cart","console","log","totalSalary","map","element","reduce","total","App","useState","users","setUsers","setCart","newCart","useEffect","fetch","then","res","json","data","results","catch","err","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kSAUeA,EARA,WACX,OACI,yBAAKC,MAAO,CAACC,gBAAiB,SAC1B,wBAAID,MAAQ,CAACE,MAAO,QAASC,UAAW,SAAUC,QAAS,WAA3D,yB,uBC6BGC,EA7BD,SAACC,GACb,IAAMC,EAAOD,EAAME,KAAKD,KAAKE,MAAQ,IAAMH,EAAME,KAAKD,KAAKG,KACrDC,EAAQL,EAAME,KAAKG,MACnBC,EAAQN,EAAME,KAAKI,MACnBC,EAAqC,KAA3BP,EAAME,KAAKM,IAAIC,IAAM,IAC/BC,EAAMV,EAAME,KAAKS,QAAQC,MACzBC,EAAYb,EAAMa,UAExB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKL,EAAKM,IAAI,MAErB,yBAAKF,UAAU,gBACb,4BAAKb,GACL,qCAAWI,GACX,yCAAeC,GACf,6BACA,2CAAiBC,EAAjB,SAEF,yBAAKO,UAAU,YACb,4BAAQG,MAAM,iBAAiBC,QAAS,kBAAML,EAAUb,EAAME,QAC9D,kBAAC,IAAD,CAAiBiB,KAAMC,MADvB,gBCNOC,EAjBF,SAACrB,GACV,IAAMsB,EAAOtB,EAAMsB,KACnBC,QAAQC,IAAIF,GACZ,IAKMG,EALSH,EAAKI,KAAI,SAAAC,GAAO,OAAuB,KAApBA,EAAQnB,IAAIC,IAAI,OAKvBmB,QAAO,SAACC,EAAMtB,GAAP,OAAgBsB,EAAMtB,IAAO,GAE/D,OACI,6BACI,mDAAyBkB,EAAzB,S,MC0BGK,MAnCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENT,EAFM,KAEAY,EAFA,KAIPrB,EAAY,SAACX,GACjB,IAAMiC,EAAO,sBAAOb,GAAP,CAAapB,IAC1BgC,EAAQC,IAUV,OAPAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUR,EAASQ,EAAKC,YAC7BC,OAAM,SAACC,GAAD,OAASrB,QAAQC,IAAIoB,QAC7B,IAGD,6BACE,kBAAC,EAAD,MACA,yBAAK9B,UAAU,iBACb,yBAAKA,UAAU,aACZkB,EAAMN,KAAI,SAACxB,GAAD,OACT,kBAAC,EAAD,CAAOA,KAAMA,EAAMW,UAAWA,QAGlC,yBAAKC,UAAU,aACb,4CAAkBkB,EAAMa,QACxB,4CAAkBvB,EAAKuB,QACvB,kBAAC,EAAD,CAAMvB,KAAMA,QCtBFwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.fcbcbabe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={{backgroundColor: '#333'}}>\r\n            <h1 style ={{color: 'white', textAlign: 'center', padding: '15px 0'}}>Random User Profile</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Users.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Users = (props) => {\r\n  const name = props.user.name.first + ' ' + props.user.name.last;\r\n  const email = props.user.email;\r\n  const phone = props.user.phone;\r\n  const salary = (props.user.dob.age + 13) * 1000;\r\n  const img = props.user.picture.large;\r\n  const handleAdd = props.handleAdd;\r\n\r\n  return (\r\n    <div className='users-container'>\r\n      <div className='img-container'>\r\n        <img src={img} alt='' />\r\n      </div>\r\n      <div className='user-details'>\r\n        <h2>{name}</h2>\r\n        <p>Email: {email}</p>\r\n        <small>Phone: {phone}</small>\r\n        <br />\r\n        <small>Salary: ${salary} /yr</small>\r\n      </div>\r\n      <div className='add-user'>\r\n        <button class='button button1' onClick={() => handleAdd(props.user)}>\r\n        <FontAwesomeIcon icon={faUser} /> Add User\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from 'react';\r\n\r\n\r\nconst Cart = (props) => {\r\n    const cart = props.cart;\r\n    console.log(cart);\r\n    const salary = cart.map(element=>(element.dob.age+13)*1000);\r\n    \r\n    // const salary = cart.dob.age+30;\r\n    // const salary = (cart.user.dob.age + 13) * 1000;\r\n    // console.log(cart);\r\n    const totalSalary = salary.reduce((total,salary)=>total+salary,0);\r\n    \r\n    return (\r\n        <div>\r\n            <h3>Cumulative Salary: ${totalSalary}/yr</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport Users from './components/Users/Users';\nimport Cart from './components/Cart/Cart';\nimport './App.css';\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [cart, setCart] = useState([]);\n\n  const handleAdd = (user) => {\n    const newCart = [...cart, user];\n    setCart(newCart);\n  };\n\n  useEffect(() => {\n    fetch('https://randomuser.me/api/?results=15')\n      .then((res) => res.json())\n      .then((data) => setUsers(data.results))\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div>\n      <Header></Header>\n      <div className='app-container'>\n        <div className='user-list'>\n          {users.map((user) => (\n            <Users user={user} handleAdd={handleAdd}></Users>\n          ))}\n        </div>\n        <div className='cart-area'>\n          <h2>Total Users: {users.length}</h2>\n          <h3>Users Added: {cart.length}</h3>\n          <Cart cart={cart}></Cart>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}